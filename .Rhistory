ylab("")+xlab("")+ theme(axis.text.x = element_text(angle = 45, hjust = 1,size=10),
axis.text.y=element_text(size=10),
legend.position = "right",legend.text = element_text(size=6),
legend.title = element_text(size=10,face="bold"),
axis.title.y = element_text(size=12,face="bold"),
plot.margin = unit(c(3,1,1,1),"lines"),panel.background = element_rect(fill = "white",colour = "grey",size = 0.5, linetype = "solid"),
panel.grid.minor.y = element_blank(),
strip.text.y = element_text(color="white",size=12))
#coord_cartesian(ylim=c(1,n_sig+0.4))
g1 <- ggplotGrob(p1)
my_color <- brewer.pal(8, "Set3")[c(1,3:8,2)]
### change the color of facet strips
strip_both <- which(grepl('strip-', g1$layout$name))
k <- 1
for (i in strip_both) {
j1 <- which(grepl('rect', g1$grobs[[i]]$grobs[[1]]$childrenOrder))
g1$grobs[[i]]$grobs[[1]]$children[[j1]]$gp$fill <- my_color[k]
k <- k+1
}
pdf(file=output,width = width,height = height)
grid.draw(g1)
dev.off()
}
Cor_heatmap(EvoExposure_merge_snv_immune,output="immune_correlation_face(type).pdf",var_index = 40:99,n_sig=5,minsample=10,height=15,width=50,facet="cancertype")
Cor_heatmap <- function(file,var_index,output="NA",n_sig,minsample,width = 12,height = 30,facet) {
library(grid)
rm(g1,p1,p_type,p_all,p_ave)
p_type <- heatmap_plot_multi_variable(file,varcol=var_index,n_sig=n_sig,minsample=minsample)
p_all <- heatmap_plot_multi_variable(file,varcol=var_index,n_sig=n_sig,Type=F)
p_ave <- p_type %>%
group_by(variable,varlable) %>%
dplyr::summarize(value=mean(r))
coul = colorRampPalette(brewer.pal(8, "RdBu"))(256)
par(bg = 'white')
if (facet=="cancertype") p1 <- ggplot(p_type,aes(x=varlable,y=variable,fill=r))+geom_tile()+facet_grid(rows = vars(cancertype))+
geom_text(aes(x=varlable,y=variable,label=round(r,2)),size=3,col="#ffffff")+ coord_flip()
if (facet=="signature") p1 <- ggplot(p_type,aes(x=cancertype,y=varlable,fill=r))+geom_tile()+facet_grid(rows = vars(variable))+
geom_text(aes(x=cancertype,y=varlable,label=round(r,2)),size=3,col="#ffffff")
if (facet=="measure") p1 <- ggplot(p_type,aes(x=cancertype,y=variable,fill=r))+geom_tile()+facet_grid(rows = vars(varlable))+
geom_text(aes(x=cancertype,y=variable,label=round(r,2)),size=3,col="#ffffff")
p1 <- p1 + scale_fill_gradient2(low=coul[1],mid="#ffffff",high=coul[256],midpoint = 0,name="Spearman Correlation")+
#labs(subtitle = paste0(varlabel))+
#annotate('text',x=1:nrow(cor_n_type),y=rep(n_sig+0.7,each=nrow(cor_n_type)),label=cor_n_type[,2],size=3)+
ylab("")+xlab("")+ theme(axis.text.x = element_text(angle = 45, hjust = 1,size=10),
axis.text.y=element_text(size=10),
legend.position = "right",legend.text = element_text(size=6),
legend.title = element_text(size=10,face="bold"),
axis.title.y = element_text(size=12,face="bold"),
plot.margin = unit(c(3,1,1,1),"lines"),panel.background = element_rect(fill = "white",colour = "grey",size = 0.5, linetype = "solid"),
panel.grid.minor.y = element_blank(),
strip.text.y = element_text(color="white",size=12))
#coord_cartesian(ylim=c(1,n_sig+0.4))
g1 <- ggplotGrob(p1)
my_color <- brewer.pal(8, "Set3")[c(1,3:8,2)]
### change the color of facet strips
strip_both <- which(grepl('strip-', g1$layout$name))
k <- 1
for (i in strip_both) {
j1 <- which(grepl('rect', g1$grobs[[i]]$grobs[[1]]$childrenOrder))
g1$grobs[[i]]$grobs[[1]]$children[[j1]]$gp$fill <- my_color[k]
k <- k+1
}
pdf(file=output,width = width,height = height)
grid.draw(g1)
dev.off()
}
Cor_heatmap <- function(file,var_index,output="NA",n_sig,minsample,width = 12,height = 30,facet) {
library(grid)
rm(g1,p1,p_type,p_all,p_ave)
p_type <- heatmap_plot_multi_variable(file,varcol=var_index,n_sig=n_sig,minsample=minsample)
p_all <- heatmap_plot_multi_variable(file,varcol=var_index,n_sig=n_sig,Type=F)
p_ave <- p_type %>%
group_by(variable,varlable) %>%
dplyr::summarize(value=mean(r))
coul = colorRampPalette(brewer.pal(8, "RdBu"))(256)
par(bg = 'white')
if (facet=="cancertype") p1 <- ggplot(p_type,aes(x=varlable,y=variable,fill=r))+geom_tile()+facet_grid(rows = vars(cancertype))+
geom_text(aes(x=varlable,y=variable,label=round(r,2)),size=3,col="#ffffff")+ coord_flip()
if (facet=="signature") p1 <- ggplot(p_type,aes(x=cancertype,y=varlable,fill=r))+geom_tile()+facet_grid(rows = vars(variable))+
geom_text(aes(x=cancertype,y=varlable,label=round(r,2)),size=3,col="#ffffff")
if (facet=="measure") p1 <- ggplot(p_type,aes(x=cancertype,y=variable,fill=r))+geom_tile()+facet_grid(rows = vars(varlable))+
geom_text(aes(x=cancertype,y=variable,label=round(r,2)),size=3,col="#ffffff")
p1 <- p1 + scale_fill_gradient2(low=coul[1],mid="#ffffff",high=coul[256],midpoint = 0,name="Spearman Correlation")+
#labs(subtitle = paste0(varlabel))+
#annotate('text',x=1:nrow(cor_n_type),y=rep(n_sig+0.7,each=nrow(cor_n_type)),label=cor_n_type[,2],size=3)+
ylab("")+xlab("")+ theme(axis.text.x = element_text(angle = 45, hjust = 1,size=10),
axis.text.y=element_text(size=10),
legend.position = "right",legend.text = element_text(size=6),
legend.title = element_text(size=10,face="bold"),
axis.title.y = element_text(size=12,face="bold"),
plot.margin = unit(c(3,1,1,1),"lines"),panel.background = element_rect(fill = "white",colour = "grey",size = 0.5, linetype = "solid"),
panel.grid.minor.y = element_blank(),
strip.text.y = element_text(color="white",size=12))
#coord_cartesian(ylim=c(1,n_sig+0.4))
g1 <- ggplotGrob(p1)
my_color <- brewer.pal(8, "Set3")[c(1,3:8,2)]
### change the color of facet strips
strip_both <- which(grepl('strip-', g1$layout$name))
k <- 1
for (i in strip_both) {
j1 <- which(grepl('rect', g1$grobs[[i]]$grobs[[1]]$childrenOrder))
g1$grobs[[i]]$grobs[[1]]$children[[j1]]$gp$fill <- my_color[k]
k <- k+1
}
pdf(file=output,width = width,height = height)
grid.draw(g1)
dev.off()
}
Cor_heatmap(EvoExposure_merge_snv_immune,output="immune_correlation_face(type).pdf",var_index = 40:99,n_sig=5,minsample=10,height=15,width=50,facet="cancertype")
Cor_heatmap <- function(file,var_index,output="NA",n_sig,minsample,width = 12,height = 30,facet) {
library(grid)
rm(g1,p1,p_type,p_all,p_ave)
p_type <- heatmap_plot_multi_variable(file,varcol=var_index,n_sig=n_sig,minsample=minsample)
p_all <- heatmap_plot_multi_variable(file,varcol=var_index,n_sig=n_sig,Type=F)
p_ave <- p_type %>%
group_by(variable,varlable) %>%
dplyr::summarize(value=mean(r))
coul = colorRampPalette(brewer.pal(8, "RdBu"))(256)
par(bg = 'white')
if (facet=="cancertype") p1 <- ggplot(p_type,aes(x=varlable,y=variable,fill=r))+geom_tile()+facet_grid(cols = vars(cancertype))+
geom_text(aes(x=varlable,y=variable,label=round(r,2)),size=3,col="#ffffff")
if (facet=="signature") p1 <- ggplot(p_type,aes(x=cancertype,y=varlable,fill=r))+geom_tile()+facet_grid(rows = vars(variable))+
geom_text(aes(x=cancertype,y=varlable,label=round(r,2)),size=3,col="#ffffff")
if (facet=="measure") p1 <- ggplot(p_type,aes(x=cancertype,y=variable,fill=r))+geom_tile()+facet_grid(rows = vars(varlable))+
geom_text(aes(x=cancertype,y=variable,label=round(r,2)),size=3,col="#ffffff")
p1 <- p1 + scale_fill_gradient2(low=coul[1],mid="#ffffff",high=coul[256],midpoint = 0,name="Spearman Correlation")+
#labs(subtitle = paste0(varlabel))+
#annotate('text',x=1:nrow(cor_n_type),y=rep(n_sig+0.7,each=nrow(cor_n_type)),label=cor_n_type[,2],size=3)+
ylab("")+xlab("")+ theme(axis.text.x = element_text(angle = 45, hjust = 1,size=10),
axis.text.y=element_text(size=10),
legend.position = "right",legend.text = element_text(size=6),
legend.title = element_text(size=10,face="bold"),
axis.title.y = element_text(size=12,face="bold"),
plot.margin = unit(c(3,1,1,1),"lines"),panel.background = element_rect(fill = "white",colour = "grey",size = 0.5, linetype = "solid"),
panel.grid.minor.y = element_blank(),
strip.text.y = element_text(color="white",size=12))
#coord_cartesian(ylim=c(1,n_sig+0.4))
g1 <- ggplotGrob(p1)
my_color <- brewer.pal(8, "Set3")[c(1,3:8,2)]
### change the color of facet strips
strip_both <- which(grepl('strip-', g1$layout$name))
k <- 1
for (i in strip_both) {
j1 <- which(grepl('rect', g1$grobs[[i]]$grobs[[1]]$childrenOrder))
g1$grobs[[i]]$grobs[[1]]$children[[j1]]$gp$fill <- my_color[k]
k <- k+1
}
pdf(file=output,width = width,height = height)
grid.draw(g1)
dev.off()
}
Cor_heatmap(EvoExposure_merge_snv_immune,output="immune_correlation_face(type).pdf",var_index = 40:99,n_sig=5,minsample=10,height=15,width=50,facet="cancertype")
Cor_heatmap <- function(file,var_index,output="NA",n_sig,minsample,width = 12,height = 30,facet) {
library(grid)
rm(g1,p1,p_type,p_all,p_ave)
p_type <- heatmap_plot_multi_variable(file,varcol=var_index,n_sig=n_sig,minsample=minsample)
p_all <- heatmap_plot_multi_variable(file,varcol=var_index,n_sig=n_sig,Type=F)
p_ave <- p_type %>%
group_by(variable,varlable) %>%
dplyr::summarize(value=mean(r))
coul = colorRampPalette(brewer.pal(8, "RdBu"))(256)
par(bg = 'white')
if (facet=="cancertype") p1 <- ggplot(p_type,aes(x=variable,y=varlable,fill=r))+geom_tile()+facet_grid(cols = vars(cancertype))+
geom_text(aes(x=variable,y=varlable,label=round(r,2)),size=3,col="#ffffff")
if (facet=="signature") p1 <- ggplot(p_type,aes(x=cancertype,y=varlable,fill=r))+geom_tile()+facet_grid(rows = vars(variable))+
geom_text(aes(x=cancertype,y=varlable,label=round(r,2)),size=3,col="#ffffff")
if (facet=="measure") p1 <- ggplot(p_type,aes(x=cancertype,y=variable,fill=r))+geom_tile()+facet_grid(rows = vars(varlable))+
geom_text(aes(x=cancertype,y=variable,label=round(r,2)),size=3,col="#ffffff")
p1 <- p1 + scale_fill_gradient2(low=coul[1],mid="#ffffff",high=coul[256],midpoint = 0,name="Spearman Correlation")+
#labs(subtitle = paste0(varlabel))+
#annotate('text',x=1:nrow(cor_n_type),y=rep(n_sig+0.7,each=nrow(cor_n_type)),label=cor_n_type[,2],size=3)+
ylab("")+xlab("")+ theme(axis.text.x = element_text(angle = 45, hjust = 1,size=10),
axis.text.y=element_text(size=10),
legend.position = "right",legend.text = element_text(size=6),
legend.title = element_text(size=10,face="bold"),
axis.title.y = element_text(size=12,face="bold"),
plot.margin = unit(c(3,1,1,1),"lines"),panel.background = element_rect(fill = "white",colour = "grey",size = 0.5, linetype = "solid"),
panel.grid.minor.y = element_blank(),
strip.text.y = element_text(color="white",size=12))
#coord_cartesian(ylim=c(1,n_sig+0.4))
g1 <- ggplotGrob(p1)
my_color <- brewer.pal(8, "Set3")[c(1,3:8,2)]
### change the color of facet strips
strip_both <- which(grepl('strip-', g1$layout$name))
k <- 1
for (i in strip_both) {
j1 <- which(grepl('rect', g1$grobs[[i]]$grobs[[1]]$childrenOrder))
g1$grobs[[i]]$grobs[[1]]$children[[j1]]$gp$fill <- my_color[k]
k <- k+1
}
pdf(file=output,width = width,height = height)
grid.draw(g1)
dev.off()
}
Cor_heatmap(EvoExposure_merge_snv_immune,output="immune_correlation_face(type).pdf",var_index = 40:99,n_sig=5,minsample=10,height=15,width=50,facet="cancertype")
files.sources = list.files("D:/Project/Xinyu/EvoDynamicsSignature/R")
sapply(files.sources,source)
setwd(D:\Project\Xinyu\EvoDynamicsSignature\")
setwd("D:\Project\Xinyu\EvoDynamicsSignature\")
setwd("Data\Project\Xinyu\EvoDynamicsSignature\")
setwd("D:\Project\Xinyu\EvoDynamicsSignature\")
cwd
setwd("D:\Project\Xinyu\EvoDynamicsSignature\")
cwd
pwd
setwd("D:/Project/Xinyu/EvoDynamicsSignature")
library(roxygen2)
roxygenize("R/Association_heatmap")
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
roxygenize("R/Association_heatmap")
library(EvoDynamicsSignature)
roxygenize("R/Association_heatmap")
setwd("D:/Project/Xinyu/")
roxygenize("Association_heatmap")
setwd("D:/Project/Xinyu/")
library(roxygen2)
roxygenize("Association_heatmap")
roxygenize("EvoDynamicsSignature")
roxygenize("EvoDynamicsSignature")
library(roxygen2)
roxygenize("EvoDynamicsSignature")
setwd("D:/Project/Xinyu/EvoDynamicsSignatures")
setwd("D:/Project/Xinyu/EvoDynamicsSignatures/")
setwd("D:/Project/Xinyu/EvoDynamicsSignature/")
library(EvoDynamiscSignatures)
library(EvoDynamicsSignatures)
library(EvoDynamicsSignature)
library(EvoDynamicsSignature)
setwd("D:/Project/Xinyu/test_TCGA")
Postsummary_folder <- "1.post_summary/"
Matrix_folder <- paste0("2.ccfMatrix/")
rank_estimate_folder <- paste0(Matrix_folder,"rank_estimate/")
rank_result_folder <-  paste0("3.rank_result/")
nmf_folder <- "4.NMF_type/"
HC_folder <- "5.HC_consensus/"
Exposure_folder <- "6.NMF_all/"
test <- "test/"
Ccube_folder <- "Data/Ccube/TCGA_0106/"
cancertype_path <- "Data/Ccube/TCGA_cancertype.csv"
Build_post_summary <- function(input,output=NA, typefile="NA",minsample=30){
sample_list <- dir(input)
colnames <- c("samplename","Tumor_Sample_Barcode","n_mutations","ccf_0-1_percentage","ccf_0-2_percentage","Ncluster","purity","ccube_purity","ccf_mean_cluster1","ccf_mean_cluster2","ccf_mean_cluster3","ccf_mean_cluster4","ccf_mean_cluster5")
if (i==1) cat("Start building post summary for",length(sample_list),"files","\n")
if (i%%1000==0) print(paste0("----- Finish loading ",i,"th files -----"))
post_summary <- do.call(rbind,lapply(sample_list,post_summary_analyse))
if (!is.na(typefile)) {
cancertype <- read.csv(file=typefile)[,-1]
colnames(cancertype)[1] <- "samplename"
post_summary <- left_join(post_summary, cancertype,by="samplename")
if ("Types" %in% colnames(post_summary)) colnames(post_summary)[which(colnames(post_summary)=="Types")] <- "cancertype"
}
if (!is.na(output)) {
write.csv(post_summary,file=paste0(output,"post_summary_",length(sample_list),"_",Sys.Date(),".csv"))
save(post_summary,file=paste0(output,"post_summary_",length(sample_list),"_",Sys.Date(),".RData"))
}
xx <- post_summary %>% group_by(cancertype) %>% summarize(n=n())
ggplot(data=xx,aes(x=cancertype,y=n)) +
geom_bar(position = 'dodge', stat='identity') +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.25)
ggsave(paste0(output,"type_summary.pdf"),width = 50, height = 15, units = "cm")
## filter types with minimum samples
types <- xx %>% filter(n>minsample) %>% select(cancertype)
post_summary <- subset(post_summary,cancertype %in% types$cancertype)
save(post_summary,file=paste0(output,nrow(post_summary),"_filtered_post_summary(n>",minsample,").RData"))
return(post_summary)
}
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder,mergeType = T, typefile = cancertype_path))
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile = cancertype_path))
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
input=Ccube_folder
output=Postsummary_folder
typefile=cancertype_path
minsample=30
sample_list <- dir(input)
colnames <- c("samplename","Tumor_Sample_Barcode","n_mutations","ccf_0-1_percentage","ccf_0-2_percentage","Ncluster","purity","ccube_purity","ccf_mean_cluster1","ccf_mean_cluster2","ccf_mean_cluster3","ccf_mean_cluster4","ccf_mean_cluster5")
if (i==1) cat("Start building post summary for",length(sample_list),"files","\n")
#' Build count matrix for input samples
#' @param input ccf file foder path
#' @param output output path
#' @param typefile type with sample-type mapping
#' @return a data frame containing the summary for all samples in the ccf files
#' @export
#'
Build_post_summary <- function(input,output=NA, typefile="NA",minsample=30){
sample_list <- dir(input)
colnames <- c("samplename","Tumor_Sample_Barcode","n_mutations","ccf_0-1_percentage","ccf_0-2_percentage","Ncluster","purity","ccube_purity","ccf_mean_cluster1","ccf_mean_cluster2","ccf_mean_cluster3","ccf_mean_cluster4","ccf_mean_cluster5")
post_summary <- do.call(rbind,lapply(sample_list,post_summary_analyse))
if (!is.na(typefile)) {
cancertype <- read.csv(file=typefile)[,-1]
colnames(cancertype)[1] <- "samplename"
post_summary <- left_join(post_summary, cancertype,by="samplename")
if ("Types" %in% colnames(post_summary)) colnames(post_summary)[which(colnames(post_summary)=="Types")] <- "cancertype"
}
if (!is.na(output)) {
write.csv(post_summary,file=paste0(output,"post_summary_",length(sample_list),"_",Sys.Date(),".csv"))
save(post_summary,file=paste0(output,"post_summary_",length(sample_list),"_",Sys.Date(),".RData"))
}
xx <- post_summary %>% group_by(cancertype) %>% summarize(n=n())
ggplot(data=xx,aes(x=cancertype,y=n)) +
geom_bar(position = 'dodge', stat='identity') +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.25)
ggsave(paste0(output,"type_summary.pdf"),width = 50, height = 15, units = "cm")
## filter types with minimum samples
types <- xx %>% filter(n>minsample) %>% select(cancertype)
post_summary <- subset(post_summary,cancertype %in% types$cancertype)
save(post_summary,file=paste0(output,nrow(post_summary),"_filtered_post_summary(n>",minsample,").RData"))
return(post_summary)
}
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
library(EvoDynamicsSignature)
Postsummary_folder <- "1.post_summary/"
Matrix_folder <- paste0("2.ccfMatrix/")
rank_estimate_folder <- paste0(Matrix_folder,"rank_estimate/")
rank_result_folder <-  paste0("3.rank_result/")
nmf_folder <- "4.NMF_type/"
HC_folder <- "5.HC_consensus/"
Exposure_folder <- "6.NMF_all/"
test <- "test/"
Ccube_folder <- "Data/Ccube/TCGA_0106/"
cancertype_path <- "Data/Ccube/TCGA_cancertype.csv"
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
remove.packages("EvoDynamicsSignature")
library(EvoDynamicsSignature)
library(EvoDynamicsSignature)
library(EvoDynamicsSignature)
setwd("D:/Project/Xinyu/test_TCGA")
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
remove.packages("EvoDynamicsSignature")
library(EvoDynamicsSignature)
setwd("D:/Project/Xinyu/test_TCGA")
## Initialization - TCGA
setwd("D:/Project/Xinyu/test_TCGA")
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
remove.packages("EvoDynamicsSignature")
library(EvoDynamicsSignature)
## Initialization - TCGA
setwd("D:/Project/Xinyu/test_TCGA")
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
remove.packages("EvoDynamicsSignature")
library(EvoDynamicsSignature)
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
library(EvoDynamicsSignature)
## Initialization - TCGA
setwd("D:/Project/Xinyu/test_TCGA")
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
remove.packages("EvoDynamicsSignature")
library(EvoDynamicsSignature)
setwd("D:/Project/Xinyu/test_TCGA")
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
remove.packages("EvoDynamicsSignature")
library(EvoDynamicsSignature)
setwd("D:/Project/Xinyu/test_TCGA")
library(EvoDynamicsSignature)
setwd("D:/Project/Xinyu/test_TCGA")
#####################################################################
## Step2: build post_summary
# from scratch
post_summary <- system.time(Build_post_summary(input=Ccube_folder,output=Postsummary_folder, typefile=cancertype_path))
setwd("D:/Project/Xinyu")
setwd("D:/Project/Xinyu/EvoSig")
roxygenize()
roxygen2::roxygenize()
dplyr::%>%
library(EvoDynamicsSignature)
warnings()
consensus_sig <- read.csv(file=D:/Project/Xinyu/9.4_consensus/sig_hclust-cluster_6077_9.22.csv)[,-1]
consensus_sig <- read.csv(file="D:/Project/Xinyu/9.4_consensus/sig_hclust-cluster_6077_9.22.csv")[,-1]
consensus_sig <- read.csv(file="D:/Project/Xinyu/9.4_consensus/sig_hclust-cluster_6077_9.22.csv")
load("D:/Project/Xinyu/lcd_sig_2019-09-22.RData")
typefile <- read.csv("D:/Project/Xinyu/test_TCGA/Data/Ccube/TCGA_cancertype.csv")
View(typefile)
typefile <- read.csv("D:/Project/Xinyu/test_TCGA/Data/Ccube/TCGA_cancertype.csv")[,-1]
typefile <- read.csv("D:/Project/Xinyu/test_TCGA/Data/Ccube/TCGA_cancertype.csv")[,-1]
use_data(typefile)
devtools::use_data(typefile)
install.packages("devtools")
devtools::use_data(typefile)
library(devtools)
use_data(typefile)
use_package_doc()
roxygen2::roxygenize()
setwd("D:/Project/Xinyu/EvoSig/R")
save(typefile,file="TCGA_type_sample_mapping.rda")
list.source=dir()
sapply(list.source,roxygenize())
sapply(list.source,roxygen2::roxygenize())
setwd("D:/Project/Xinyu/EvoSig")
roxygen2::roxygenize()
usethis::use_package("dplyr")
traceback()
usethis::use_package("dplyr")
usethis::use_package("ggplot")
usethis::use_package("ggplot2")
devtools::document()
devtools::document()
traceback()
devtools::document()
devtools::document()
usethis::use_package("NMF")
usethis::use_package("plyr::ddply")
usethis::use_package("plyr")
usethis::use_package("RColorBrewer")
usethis::use_package("YAPSA")
usethis::use_package("magrittr")
usethis::use_package("reshape2")
usethis::use_package("cowplot")
usethis::use_package("grid")
usethis::use_package("gridExtra")
usethis::use_package("gridExtra")
devtools::document()
any(duplicated(names(formals(output))))
devtools::document()
usethis::use_package("NbClust")
usethis::use_package("pheatmap")
usethis::use_package("ggpubr")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
colorRampPalette
colorRampPalette(brewer.pal(8, "RdBu"))(256)
brewer.pal
devtools::document()
TCGAtypefile <- typefile
usethis::use_data("TCGAtypefile")
usethis::use_data(TCGAtypefile,TCGAtypefile,internal=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(EvoSig)
library(EvoSig)
packageVersion("readr")
devtools::document()
install.packages("dichromat")
install.packages("dichromat")
devtools::document()
devtools::document()
usethis::use_package("rlang")
library(rlang)
library(EvoSig)
library(EvoSig)
devtools::document()
installed.packages("imguR")
devtools::document()
library(EvoSig)
load("D:/Project/Xinyu/test_TCGA/0208_6_signature_extraction/lcd_sig_2019-09-22.RData")
load("D:/Project/Xinyu/test_TCGA/0208_6_signature_extraction/post_summary_7777_2020-01-09.RData")
load("D:/Project/Xinyu/test_TCGA/0208_6_signature_extraction/CCFMatrix_overall.RData")
ccfMat[[3]]
samplelist <- read.csv(paste0(HC_folder,"correlation_5_sample_list_random.csv"))[,-1]
setwd("D:/Project/Xinyu/test_TCGA")
Postsummary_folder <- "1.post_summary/"
Matrix_folder <- paste0("2.ccfMatrix/")
rank_estimate_folder <- paste0(Matrix_folder,"rank_estimate/")
rank_result_folder <-  paste0("3.rank_result/")
nmf_folder <- "4.NMF_type/"
HC_folder <- "5.HC_consensus/"
Exposure_folder <- "6.NMF_all/"
test <- "test/"
Ccube_folder <- "Data/Ccube/TCGA_0106/"
cancertype_path <- "Data/Ccube/TCGA_cancertype.csv"
samplelist <- read.csv(paste0(HC_folder,"correlation_5_sample_list_random.csv"))[,-1]
## extract 6 signature
Extract_sig(ccfMat=ccfMat[[3]],consensus_sig=lcd_sig,samplelist=samplelist)
## extract 6 signature
library(EvoSig)
Extract_sig(ccfMat=ccfMat[[3]],consensus_sig=lcd_sig,samplelist=samplelist)
library(EvoSig)
Extract_sig(ccfMat=ccfMat[[3]],consensus_sig=lcd_sig,samplelist=samplelist)
## extract 6 signature
library(EvoSig)
Extract_sig(ccfMat=ccfMat[[3]],consensus_sig=lcd_sig,samplelist=samplelist)
